def main():

    # Gets user input for year and month
    year = get_year()
    month = get_month()

    # Computes number of days in the month
    num_days = days_month(month, year)

    # Computes the starting day of the week
    dow = compute_offset(year, month)

    # Displays the calendar table
    display_table(dow, num_days)


def get_month():

    # Gets the int month from user
    month = int(input("Enter a month number (1-12): "))

    # Checks to see if it is valid
    if 1<= month <= 12:
        return month
    else:
        print(f"Error: Enter valid number!")

def get_year():
    try:

        # Gets year from user
        year = int(input("Enter a year after 1752: "))

        # Checks to see if it is valid
        if year >= 1753:
            return year
        else:    
            print("Error: Please enter a valid year!")
    except:
        print("Error: Please enter a number!")

def compute_offset(year, month):

    # Compute the total number of days since January 1, 1753
    num_days = 0

    # Add days for complete years
    for year_count in range(1753, year):
        num_days += days_year(year_count)

    # Add days for months in the current year
    for month_count in range(1, month):
        num_days += days_month(month_count, year)

    # Return the offset (0 = Sunday, 1 = Monday, ..., 6 = Saurday)
    return (num_days + 1) % 7

def days_year(year):

    # Counts how many days with and without leap year
    if is_leap_year(year):
        return 366
    else:
        return 365

def is_leap_year(year):
    
    # Year should be before 1752 if not than something is wrong with the code!
    
    assert(year > 1752)

    # Not a leap year is not evenly divisible by 4
    if year % 4 != 0:
        return False 
    
    # A leap year is not divisible by 100
    if year % 100 != 0:
        return True
    
    # On;y centuries are left
    if year % 400 == 0:
        return True
    else:
        return False
    
    assert(False)

def days_month(month, year):

    # Counts the days for the months with 31 days
    if month in (1, 3, 5, 7, 8, 10, 12):
        return 31
    
    # Counts the days for the months with 30 days
    elif month in (4, 6, 9, 11):
        return 30
    
    # Counts the days for Februry with and with out leap year
    elif month == 2:
        if is_leap_year(year):
            return 29
        else:
            return 28
    
def display_table(dow, num_days):
    '''Display a calendar table'''
    assert(type(num_days) == type(dow) == type(0))
    assert(0 <= dow <= 6)
    assert(28 <= num_days <= 31)

    # Display a nice table header
    print("  Su  Mo  Tu  We  Th  Fr  Sa")

    # Indent for the first day of the week
    for indent in range(dow):
        print("    ", end='')

    # Display the days of the month
    for dom in range(1, num_days + 1):
        print(repr(dom).rjust(4), end='')
        dow += 1
        # Newline after Saturdays
        if dow % 7 == 0:
            print("") # newline

    # We must end with a newline
    if dow % 7 != 0:
        print("") # newline


# Output
if __name__ == "__main__":
    main()
